{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of Copy of Copy of example",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPCebSJfKpkaGOtchVvRRTF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/karitosoto/karen/blob/main/example%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZXsdZ-E77Uun",
        "outputId": "6006df9d-b97d-4510-958d-5082e6bfa6cb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hola mundo\n"
          ]
        }
      ],
      "source": [
        "print (\"hola mundo\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "c6cceGrYL2VQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "name = name.tittle()"
      ],
      "metadata": {
        "id": "5FvGnmbr9Fz9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name = input (\"what is your name\").strip().title()\n",
        "print(f\"hello, {name}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3yFrt7JT9WkS",
        "outputId": "726376cc-a708-48f9-bcb4-c4afa4b4684b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "what is your name  karen barrera\n",
            "hello, Karen Barrera\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "1+1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AUg7STh9Djnj",
        "outputId": "ef1ff5bf-72cf-4f0e-b285-8e0bde9f1ce0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "FjcYiCZHTO3l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = int(input(\"what's x?\"))\n"
      ],
      "metadata": {
        "id": "5XFX9UWQT0fq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = int(input(\"what's x?\"))\n",
        "y = int(input(\"what's y?\"))\n",
        "print (X + y)"
      ],
      "metadata": {
        "id": "pNnYHQhjTPbI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e2cabd3-55d4-453b-85b9-fae177c0bcdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "what's x?3\n",
            "what's y?5\n",
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "BimVU2VBaLSy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = float(input(\"what's x?\"))\n",
        "y = float(input(\"what's y?\"))\n",
        "\n",
        "z = round(X + y)\n",
        "print (f\"{z:,}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6d565ec0-4c3b-4358-f424-a97b7534dd1b",
        "id": "whdbNzQQaOoj"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "what's x?999\n",
            "what's y?1\n",
            "1,000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = float(input(\"what's x?\"))\n",
        "y = float(input(\"what's y?\"))\n",
        "\n",
        "z = X/y\n",
        "print (f\"{z:.2F}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BRQuKm0qeAgH",
        "outputId": "a293fffb-10b2-4135-bdcf-07796285934c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "what's x?2\n",
            "what's y?3\n",
            "0.67\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = float(input(\"what's x?\"))\n",
        "y = float(input(\"what's y?\"))\n",
        "\n",
        "z = X/y\n",
        "print (z)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GiEH-Tm3eRhq",
        "outputId": "7b011444-562e-4ef3-c4ed-afb8ea84a1e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "what's x?2\n",
            "what's y?3\n",
            "0.6666666666666666\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "def"
      ],
      "metadata": {
        "id": "zM7yYs1k57uq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "def hello (to=\"world\"):\n",
        "\n",
        "    print (\"hello,\", to)\n",
        "\n",
        "hello()\n",
        "name= input (\"what´s your name?\")   \n",
        "hello(name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "21eObq3d2oml",
        "outputId": "e271485f-c393-4cb4-b119-0e5e98e8cb9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hello, world\n",
            "what´s your name?karen\n",
            "hello, karen\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "H4fvAi0g88GS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "def main ():\n",
        "    x =int(input(\"what´s x?\" ))\n",
        "    print (\"x squared is\", squared(x))\n",
        "\n",
        "def squared (n):\n",
        "    return pow (n,2)\n",
        "  \n",
        "main() "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a010c6bd-91f5-4d1e-869e-b1b1ccbc89ea",
        "id": "mJ56Bzo49AJs"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "what´s x?221\n",
            "x squared is 48841\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "condicional"
      ],
      "metadata": {
        "id": "w8-e0rhPAnED"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x= int(input(\"what's x?\"))\n",
        "y= int(input(\"what's y?\"))\n",
        "\n",
        "if x < y:\n",
        "  print (\"x is less than y \")\n",
        "\n",
        "elif x > y:\n",
        "  print (\"x is greater than y \")  \n",
        "\n",
        "else x == y:\n",
        "  print (\"x is equal to y \")  "
      ],
      "metadata": {
        "id": "vUkBy7vQAoi0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d66b6cfe-a628-4e47-f76b-63b00b05cca5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "what's x?5\n",
            "what's y?4\n",
            "x is greater than y \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x= int(input(\"what's x?\"))\n",
        "y= int(input(\"what's y?\"))\n",
        "\n",
        "if x < y or x y:\n",
        "  print (\"x is not equal to  y \")\n",
        "\n",
        "else :\n",
        "  print(\"x is equal to y \")\n"
      ],
      "metadata": {
        "id": "TlZfLsYybf0J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "score = int(input(\"score:\"))\n",
        "if score >= 90 and score <=100:\n",
        "  print(\"grade: A\")\n",
        "elif score >=80 and score <90:\n",
        "  print(\"grade: B\") \n",
        "elif score >=70 and score <80:\n",
        "  print(\"grade: C\")     \n",
        "elif score >=60 and score <70:\n",
        "  print(\"grade: D\") \n",
        "\n",
        "else:\n",
        "  print(\"grade:f \")  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BoS3_1nqhltY",
        "outputId": "bc32d944-ad13-4dda-93b7-aefeff2676c3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "score:100\n",
            "grade: A\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = int(input(\"what's s x?\"))\n",
        "if x % 2 == 0:\n",
        "   print (\"even\") \n",
        "\n",
        "else:\n",
        "   print (\"odd\")"
      ],
      "metadata": {
        "id": "5-_vRbrsjZYQ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eef40ad6-8cc3-420e-ba95-844348419e48"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "what's s x?6\n",
            "even\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def main ():\n",
        "    x =int(input(\"what´s x?\" ))\n",
        "    if is even  (x):\n",
        "      \n",
        "    print (\"x squared is\", squared(x))\n",
        "\n",
        "def squared (n):\n",
        "    return pow (n,2)\n",
        "  \n",
        "main() "
      ],
      "metadata": {
        "id": "ebgbj2hwqS_3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def main ():\n",
        "    x =int(input(\"what´s x?\" ))\n",
        "    if is_even(x):\n",
        "        print (\"Even\")\n",
        "\n",
        "    else:\n",
        "        print(\"odd\")\n",
        "\n",
        "def is_even(n):\n",
        "    return  True if n % 2 == 0 else False\n",
        "  \n",
        "main() "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "06wIWZZFdgDr",
        "outputId": "7f245519-87f1-45b4-f8e1-5a974693bebc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "what´s x?2\n",
            "Even\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "imprimir varias veces un text es con while"
      ],
      "metadata": {
        "id": "A__JUu3el13S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "I = 4\n",
        "while I != 0:\n",
        "    print (\"un nuevo proyecto\")\n",
        "    I= I - 1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Hc4kZ-Bl32A",
        "outputId": "2eb2f50a-75b1-481c-87d8-567be1c20505"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "un nuevo proyecto\n",
            "un nuevo proyecto\n",
            "un nuevo proyecto\n",
            "un nuevo proyecto\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " def es_triangulo(a,b,c) :\n",
        "   if a > b :\n",
        "     if a > c:\n",
        "       resultado = True if(b + c) > a else False\n",
        "     else:\n",
        "       resultado = True if (b + a) > c else False\n",
        "   else:\n",
        "     if b > c:\n",
        "       resultado = True if (a + c) > b else False \n",
        "     else:\n",
        "       resultado = True if (b + a) > c else False\n",
        "   return  resultado \n",
        "\n",
        "\n",
        "\n",
        " "
      ],
      "metadata": {
        "id": "8IQhtEZkCvCs"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "i = 0\n",
        "while i <= 6:\n",
        "  print (i)\n",
        "  i += 1\n",
        "  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-5UK8MNqKVdA",
        "outputId": "d6210239-a293-4f52-deac-4d68bbaf910c"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "sep (\",\") = el sep significa separador de ,"
      ],
      "metadata": {
        "id": "dN_TwIhxMxmI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "i = 2\n",
        "j = 25\n",
        "while i < j:\n",
        "  print (i,j, sep= \",\")\n",
        "  i *=2\n",
        "  j +=10\n",
        "print (\"the end\")\n",
        "print(i,j, sep = \",\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k3MpItRXM_o9",
        "outputId": "6ff907a2-0fe0-4284-d954-abd0e6225bc4"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2,25\n",
            "4,35\n",
            "8,45\n",
            "16,55\n",
            "32,65\n",
            "64,75\n",
            "the end\n",
            "128,85\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def min_maquina():\n",
        "   Xi = 1.0\n",
        "   Xo = Xi\n",
        "   Xi =Xo / 2.0\n",
        "   while Xi > 0.0 :\n",
        "     Xo = Xi\n",
        "     Xi = Xo / 2.0\n",
        "   return Xo\n",
        "print (\"el minimo mas pequeno es \" +str(min_maquina()))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fXOeeVQuRNHo",
        "outputId": "14a2615f-be0b-4503-86f0-db3672a06af3"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "el minimo mas pequeno es 5e-324\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "u2QLe2Zuqfqm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "bandera con while  reduce las lineas de codigo "
      ],
      "metadata": {
        "id": "1yqozqiQ5n2R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def min_maquina_do():\n",
        "   Xi = 1.0\n",
        "   bandera = True # flag\n",
        "   while bandera or Xi > 0.0 :\n",
        "     bandera = False \n",
        "     Xo = Xi\n",
        "     Xi = Xo / 2.0\n",
        "   return Xo\n",
        "print (\"el minimo mas pequeno es \" +str(min_maquina_do()))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1cdd9eee-523e-4af8-940d-cd47b3a5cf75",
        "id": "Fg4eWYYxqgIM"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "el minimo mas pequeno es 5e-324\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "while con break "
      ],
      "metadata": {
        "id": "irKeBhs6nJSw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "suma = 0\n",
        "while True:\n",
        "  dato = int(input(\"ingrese un numero entero\" +\"a sumar o O para salir:\"))\n",
        "\n",
        "  if(dato == 0):\n",
        "    break\n",
        "\n",
        "  suma += dato\n",
        "print(\"la suma es:\" + str(suma)) \n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3I2NbcNKnM2Q",
        "outputId": "a0dc7810-f550-4c32-9d5c-599499c2c697"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingrese un numero enteroa sumar o O para salir:1\n",
            "ingrese un numero enteroa sumar o O para salir:2\n",
            "ingrese un numero enteroa sumar o O para salir:5\n",
            "ingrese un numero enteroa sumar o O para salir:10\n",
            "ingrese un numero enteroa sumar o O para salir:20\n",
            "ingrese un numero enteroa sumar o O para salir:0\n",
            "la suma es:38\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "while bandera tambie se puede utilizar como break pero es mas complejo el codigo "
      ],
      "metadata": {
        "id": "SqUu4obIs2nD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "suma = 0\n",
        "dato = 0\n",
        "bandera = True\n",
        "while bandera or dato !=0:\n",
        "  bandera = False\n",
        "  dato = int(input(\"rote el numero:\"))\n",
        "  suma += dato\n",
        " \n",
        "print(\"la suma es:\" + str(suma)) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gKaklnmos_i0",
        "outputId": "f593c138-5cc9-45c7-97a3-700ea3e5dcb8"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "rote el numero:1\n",
            "rote el numero:5\n",
            "rote el numero:6\n",
            "rote el numero:0\n",
            "la suma es:12\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "fR4ueQufvvVy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dato = 1\n",
        "suma = 0\n",
        "while( dato  != 0):\n",
        " \n",
        "  dato = int(input(\"ingrese un numero entero\" +\"a sumar o O para salir:\"))\n",
        "  suma += dato\n",
        " \n",
        "print(\"la suma es:\" + str(suma)) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qsIraYGjvD-x",
        "outputId": "3f4538d5-2b59-4109-b3aa-360fc1932a1d"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ingrese un numero enteroa sumar o O para salir:1\n",
            "ingrese un numero enteroa sumar o O para salir:2\n",
            "ingrese un numero enteroa sumar o O para salir:2\n",
            "ingrese un numero enteroa sumar o O para salir:0\n",
            "la suma es:5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "yTTEAHEhw8zw"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}